Συναρτήσεις HP (σωρού (heap file))
HP_CreateFile
Η συνάρτηση αυτή δημιουργεί και ανοίγει τον φάκελο fileName
και έπειτα δημιουργεί το πρώτο μπλοκ μέσα στο οποίο:
Στο πρώτο μέρος του μπλοκ αποθηκεύει πληροφορίες τύπου HP_info
Στο τελευταίο μέρος του μπλοκ αποθηκεύει το HP_block_info .
Αυτή είναι η δομή του πρώτου μπλοκ. Τα υπόλοιπα μπλοκ έχουν την δομή:
Στο πρώτο μέρος αποθηκεύουν εγγραφές μέχρι το όριο MAX_REC.
Στο δεύτερο μέρος αποθηκεύουν το ίδιο με το πρώτο μπλοκ HP_block_info
HP_OpenFile
Ανοίγει το αρχείο και αποθηκεύει πληροφορία στο πρώτο μπλοκ μέσω της mem cpy
HP_CloseFile
Κλείνει το αρχείο και αποδευέι το πρώτο μπλοκ
HP_InsertEntry
Η συνάρτηση αυτή πραγματοποιεί την εισαγωγή στοιχείου. Αρχικά παίρνει το τελευταίο
μπλοκ που είναι αποθηκευμένο στη μνήμη και ελέγχει αν χωράει η εγγραφή προς
εισαγωγή.
Αν χωράει εισάγει την νέα εγγραφή. Αλλιώς δημιουργεί άλλο μπλοκ το οποίο κάνει
allocate στη μνήμη και εισάγει σε αυτό την νέα εγγραφή. Εγγραφές γίνονται σε όλα τα
μπλοκ εκτός του πρώτου που διατηρεί σε εκείνο το τμήμα του πληροφοριές.
HP_GetAllEntries
Η συνάρτηση αυτή επιστρέφει την εγγραφή με id = value. Αφού κάθε id είναι μοναδικό θα
επιστρέφει σε κάθε περίπτωση ένα στοιχείο. Η δομή επανάληψης διατρέχει ένα ένα τα
μπλοκ μέχρις ότου να βρει το id με την εγγραφή που ζητείται.
Συναρτήσεις HT (Hash Table)
HT_CreateFile
Η συνάρτηση αυτή δημιουργεί και ανοίγει τον φάκελο fileName
και έπειτα δημιουργεί το πρώτο μπλοκ μέσα στο οποίο:
Στο πρώτο μέρος του μπλοκ αποθηκεύει πληροφορίες τύπου HT_info
Στο δεύτερο μέρος του αποθηκεύει τον πίνακα κατακερματισμού.
Ο πίνακας αυτός ουσιαστικά έχει μέγεθος όσα τα buckets και είναι ένας πίνακας από
structs που δείχνει ποιο είναι το πρώτο και ποιο το τελευταίο block από το συγκεκριμένο
bucket.
Στο τελευταίο μέρος του μπλοκ αποθηκεύει το HT_block_info.
Αυτή είναι η δομή του πρώτου μπλοκ. Τα υπόλοιπα μπλοκ έχουν την δομή:
Στο πρώτο μέρος αποθηκεύουν εγγραφές μέχρι το όριο MAX_REC.
Στο δεύτερο μέρος αποθηκεύουν το ίδιο με το πρώτο μπλοκ HT_block_info.
HT_OpenFile
Ανοίγει το αρχείο και αποθηκεύει πληροφορία στο πρώτο μπλοκ μέσω της mem cpy.
HT_CloseFile
Κλείνει το αρχείο και αποδεσμεύει το πρώτο μπλοκ.
HT_InsertEntry
Η συνάρτηση αυτή πραγματοποιεί την εισαγωγή στοιχείου. Αρχικά βλέπει με βάση τον
αριθμό των buckets σε ποιο bucket κάνει hash το id της εγγραφής. Έπειτα παίρνει το
τελευταίο μπλοκ που είναι αποθηκευμένο στη μνήμη για το συγκεκριμένο bucket και
ελέγχει αν χωράει η εγγραφή προς εισαγωγή.
Αν χωράει εισάγει την νέα εγγραφή. Αλλιώς δημιουργεί άλλο μπλοκ το οποίο κάνει
allocate στη μνήμη και εισάγει σε αυτό την νέα εγγραφή. Επειδή θέλουμε να αποφύγουμε
να έχουμε επαναλαμβανόμενα block, και να γίνει λανθασμένα η αποθήκευση των
στοιχειων, κάθε bucket δεσμεύει σαν επόμενο μπλοκ το +=αριθμος από buskets (πχ αν
έχουμε σαν id = 81, bucketnum = 10 και έχουμε το μπλοκ 1 που έχουμε αποθηκεύσει τις
προηγούμενες εγγραφές, αλλα έχει γεμίσει και πρέπει να φτιάξουμε νέο μπλοκ τ΄τοτε το
νέο μπλο θα ήταν το 11). Εγγραφές γίνονται σε όλα τα μπλοκ εκτός του πρώτου που
διατηρεί σε εκείνο το τμήμα του πληροφορίες.
HT_GetAllEntries
Η συνάρτηση αυτή επιστρέφει την εγγραφή με id = value. Αρχικά βλέπει που κάνει hash
το value για να ψάξει το id μόνο στο σωστό bucket. Αφού κάθε id είναι μοναδικό θα
επιστρέφει σε κάθε περίπτωση ένα στοιχείο. Η δομή επανάληψης διατρέχει ένα ένα τα
μπλοκ του εκάστοτε bucket μέχρις ότου να βρει το id με την εγγραφή που ζητείται.
HashStatistics
Τυπώνει τα αποτελέσματα που ζητούνται. Ενδεικτικά:
-----------------------------------------------------------------
Hash Table Statistics
MAX REC 6the number of blocks in this file is : 51
the average number of blocks in every bucket : 5
max record sum = 30
min record sum = 30
avg record sum = 30
10 blocks overflow
bucket[0] has 4 overflow blocks
bucket[1] has 4 overflow blocks
bucket[2] has 4 overflow blocks
bucket[3] has 4 overflow blocks
bucket[4] has 4 overflow blocks
bucket[5] has 4 overflow blocks
bucket[6] has 4 overflow blocks
bucket[7] has 4 overflow blocks
bucket[8] has 4 overflow blocks
bucket[9] has 4 overflow blocks
-----------------------------------------------------------------
Αφού τα id είναι συνεχόμενα είναι αναμενόμενο να έχουμε σε όλα τα buckets ίδιο αριθμό
μπλοκ.
Συναρτήσεις SHT (Secondary Hash Table)
SHT_CrateFile
Η συνάρτηση αυτή δημιουργεί και ανοίγει τον φάκελο sfileName
και έπειτα δημιουργεί το πρώτο μπλοκ μέσα στο οποίο:
Στο πρώτο μέρος του μπλοκ αποθηκεύει πληροφορίες τύπου SHT_info
Στο δεύτερο μέρος του αποθηκεύει τον πίνακα κατακερματισμού. Ο πίνακας αυτός
ουσιαστικά έχει μέγεθος όσα τα buckets και είναι ένας πίνακας από structs που δείχνει
ποιο είναι το πρώτο και ποιο το τελευταίο block από το συγκεκριμένο bucket.
Αυτή είναι η δομή του πρώτου μπλοκ. Τα υπόλοιπα μπλοκ έχουν την δομή:
Στο πρώτο μέρος αποθηκεύουν εγγραφές μέχρι το όριο MAX_REC.
Στο δεύτερο μέρος αποθηκεύουν το ίδιο με το πρώτο μπλοκ SHT_block_info.
SHT_OpenFile
Ανοίγει το αρχείο και αποθηκεύει πληροφορία στο πρώτο μπλοκ μέσω της mem cpy.
SHT_CloseFile
Κλείνει το αρχείο και αποδεσμεύει το πρώτο μπλοκ.
SHT_InsterEntry
Η συνάρτηση αυτή πραγματοποιεί την εισαγωγή στοιχείου. Αρχικά βλέπει με βάση τον
αριθμό των buckets σε ποιο bucket κάνει hash το name της εγγραφής. Έπειτα παίρνει
το τελευταίο μπλοκ που είναι αποθηκευμένο στη μνήμη για το συγκεκριμένο bucket και
ελέγχει αν χωράει η εγγραφή προς εισαγωγή.
Αν χωράει εισάγει την νέα εγγραφή. Αλλιώς δημιουργεί άλλο μπλοκ το οποίο κάνει
allocate στη μνήμη και εισάγει σε αυτό την νέα εγγραφή. Επειδή θέλουμε να αποφύγουμε
να έχουμε επαναλαμβανόμενα block, και να γίνει λανθασμένα η αποθήκευση των
στοιχειων, κάθε bucket δεσμεύει σαν επόμενο μπλοκ το +=αριθμος από buckets. Κάθε
εγγραφή που αποθηκεύουμε στο δευτερεύον αρχείο κατακερματισμού αποτελείται από
το όνομα σε συνδυασμό με το block id το οποίο δείχνει το μπλοκ στο οποίο έχει
αποθηκευτεί ολόκληρη η εγγραφή στο ht_table. Εγγραφές γίνονται σε όλα τα μπλοκ εκτός
του πρώτου που διατηρεί σε εκείνο το τμήμα του πληροφορίες.
SHT_GetAllEntries
Η συνάρτηση αυτή επιστρέφει την εγγραφή με name = value. Αρχικά βλέπει που κάνει
hash το value για να ψάξει το name μόνο στο σωστό bucket. Κάθε φορά που βρίσκει το
name που αναζητεί, εντός των blocks του bucket φυσικά, πηγαίνει στο block απο το
ht_table και μολις βρει το όνομα που θέλει επιστρέφει όλα τα στοιχεία της εγγραφής
όπως αυ΄τα έχου αποθηκευτεί το ht.
SHashStatistics
Τυπώνει τα αποτελέσματα που ζητούνται. Ενδεικτικά:
-----------------------------------------------------------------
Secondary Hash Table Statistics
MAX REC 21the number of blocks in this file is : 13
the average number of blocks in every bucket : 1
max record sum = 73
min record sum = 0
avg record sum = 20
3 blocks overflow
bucket[0] has 0 overflow blocks
bucket[1] has 1 overflow blocks
bucket[2] has 0 overflow blocks
bucket[3] has 0 overflow blocks
bucket[4] has 0 overflow blocks
bucket[5] has 3 overflow blocks
bucket[6] has 0 overflow blocks
bucket[7] has 2 overflow blocks
bucket[8] has 0 overflow blocks
bucket[9] has 0 overflow blocks
-----------------------------------------------------------------
Στην συγκεκριμένη περίπτωση βλέπουμε ότι ο αριθμός των block που υπερχειλίζουν
διαφέρει σε κάθε bucket και αυτό συμβαίνει καθώς το hash γίνεται με βάση το όνομα